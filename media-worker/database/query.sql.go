// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package database

import (
	"context"
	"database/sql"

	"github.com/jackc/pgx/v5/pgtype"
)

const putAnime = `-- name: PutAnime :exec
INSERT INTO anime (id,
                   titles,
                   format,
                   status,
                   season,
                   season_year,
                   episodes,
                   cover_image,
                   genres,
                   average_score,
                   studio)
VALUES ($1,
        ROW($2, $3, $4)::titles,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13)
`

type PutAnimeParams struct {
	ID           int32
	Column2      string
	Column3      string
	Column4      string
	Format       pgtype.Text
	Status       string
	Season       pgtype.Text
	SeasonYear   pgtype.Int4
	Episodes     pgtype.Int4
	CoverImage   pgtype.Text
	Genres       []string
	AverageScore pgtype.Int4
	Studio       []string
}

func (q *Queries) PutAnime(ctx context.Context, arg PutAnimeParams) error {
	_, err := q.db.Exec(ctx, putAnime,
		arg.ID,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Format,
		arg.Status,
		arg.Season,
		arg.SeasonYear,
		arg.Episodes,
		arg.CoverImage,
		arg.Genres,
		arg.AverageScore,
		arg.Studio,
	)
	return err
}

const putAnimeDetails = `-- name: PutAnimeDetails :exec
INSERT INTO anime_details (id,
                           description,
                           start_date,
                           end_date,
                           duration,
                           source,
                           trailer,
                           banner_image,
                           popularity,
                           trending,
                           favourites,
                           airing_schedule,
                           recommendations,
                           score_distribution)
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13,
        $14
       )
`

type PutAnimeDetailsParams struct {
	ID                int32
	Description       pgtype.Text
	StartDate         sql.NullString
	EndDate           sql.NullString
	Duration          pgtype.Int4
	Source            pgtype.Text
	Trailer           pgtype.Text
	BannerImage       pgtype.Text
	Popularity        int32
	Trending          int32
	Favourites        int32
	AiringSchedule    sql.NullString
	Recommendations   []string
	ScoreDistribution []string
}

func (q *Queries) PutAnimeDetails(ctx context.Context, arg PutAnimeDetailsParams) error {
	_, err := q.db.Exec(ctx, putAnimeDetails,
		arg.ID,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
		arg.Duration,
		arg.Source,
		arg.Trailer,
		arg.BannerImage,
		arg.Popularity,
		arg.Trending,
		arg.Favourites,
		arg.AiringSchedule,
		arg.Recommendations,
		arg.ScoreDistribution,
	)
	return err
}

const queryHighPrioMedia = `-- name: QueryHighPrioMedia :many
SELECT anime.id
FROM anime
 LEFT JOIN anime_details
ON anime.id = anime_details.id
WHERE status IN ('RELEASING', 'NOT_YET_RELEASED')
   OR (
    status NOT IN ('RELEASING', 'NOT_YET_RELEASED')
        AND end_date IS NOT NULL
        AND EXTRACT(YEAR FROM CURRENT_DATE) = (end_date).year
	AND EXTRACT(MONTH FROM CURRENT_DATE) - (end_date).month <= 1
    )
`

func (q *Queries) QueryHighPrioMedia(ctx context.Context) ([]int32, error) {
	rows, err := q.db.Query(ctx, queryHighPrioMedia)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
